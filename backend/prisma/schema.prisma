// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AlbumType {
  SINGLE
  MINI_ALBUM
  FULL_ALBUM
  REPACKAGE
  SPECIAL
  JAPANESE
  DIGITAL_SINGLE
}

model Artist {
  id         String    @id @default(uuid())
  name       String
  koreanName String?   @map("korean_name")
  debutDate  DateTime? @map("debut_date")
  company    String?
  imageUrl   String?   @map("image_url")
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  members    Member[]
  albums     Album[]
  tracks     Track[]
  favorites  Favorite[]

  @@map("artists")
}

model Member {
  id         String    @id @default(uuid())
  artistId   String    @map("artist_id")
  name       String
  koreanName String?   @map("korean_name")
  stageName  String    @map("stage_name")
  birthDate  DateTime? @map("birth_date")
  position   String[]
  imageUrl   String?   @map("image_url")
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  artist     Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@map("members")
}

model Album {
  id          String    @id @default(uuid())
  artistId    String    @map("artist_id")
  title       String
  koreanTitle String?   @map("korean_title")
  releaseDate DateTime  @map("release_date")
  type        AlbumType
  coverUrl    String?   @map("cover_url")
  createdAt   DateTime  @default(now()) @map("created_at")

  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  tracks      Track[]
  favorites   Favorite[]

  @@map("albums")
}

model Track {
  id            String   @id @default(uuid())
  albumId       String   @map("album_id")
  artistId      String   @map("artist_id")
  title         String
  koreanTitle   String?  @map("korean_title")
  duration      Int?     // in seconds
  trackNumber   Int      @map("track_number")
  isTitle       Boolean  @default(false) @map("is_title")
  musicVideoUrl String?  @map("music_video_url")
  createdAt     DateTime @default(now()) @map("created_at")

  album         Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  artist        Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  favorites     Favorite[]

  @@map("tracks")
}

model User {
  id              String    @id @default(uuid())
  username        String    @unique
  email           String    @unique
  passwordHash    String    @map("password_hash")
  profileImageUrl String?   @map("profile_image_url")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  favorites       Favorite[]

  @@map("users")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  artistId  String?  @map("artist_id")
  albumId   String?  @map("album_id")
  trackId   String?  @map("track_id")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist    Artist?  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  album     Album?   @relation(fields: [albumId], references: [id], onDelete: Cascade)
  track     Track?   @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, artistId])
  @@unique([userId, albumId])
  @@unique([userId, trackId])
  @@map("favorites")
}